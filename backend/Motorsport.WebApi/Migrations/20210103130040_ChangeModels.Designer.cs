// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motorsport.WebApi.EfCore.Context;

namespace Motorsport.WebApi.Migrations
{
    [DbContext(typeof(MotorsportContext))]
    [Migration("20210103130040_ChangeModels")]
    partial class ChangeModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Motorsport.WebApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CircuitImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CircuitLength")
                        .HasColumnType("float");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LapRecordTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Laps")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<double>("RaceDistance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NationId");

                    b.ToTable("Circuits");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FaceImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("EventDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GrandPrixId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrandPrixId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.EventResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("Grid")
                        .HasColumnType("int");

                    b.Property<int?>("Laps")
                        .HasColumnType("int");

                    b.Property<int?>("Pits")
                        .HasColumnType("int");

                    b.Property<int?>("Pos")
                        .HasColumnType("int");

                    b.Property<int?>("Pts")
                        .HasColumnType("int");

                    b.Property<int>("SeasonCraftId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeOne")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeTwo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SeasonCraftId");

                    b.ToTable("EventResults");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.GrandPrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CircuitId")
                        .HasColumnType("int");

                    b.Property<bool>("ClosedState")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndRaceDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartRaceDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.HasIndex("SeasonId");

                    b.ToTable("GrandPrixes");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Nation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nations");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.SeasonCraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("Podiums")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("PolePositions")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("SeasonCrafts");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Circuit", b =>
                {
                    b.HasOne("Motorsport.WebApi.Models.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId");

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Driver", b =>
                {
                    b.HasOne("Motorsport.WebApi.Models.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Event", b =>
                {
                    b.HasOne("Motorsport.WebApi.Models.GrandPrix", null)
                        .WithMany("Events")
                        .HasForeignKey("GrandPrixId");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.EventResult", b =>
                {
                    b.HasOne("Motorsport.WebApi.Models.SeasonCraft", "SeasonCraft")
                        .WithMany()
                        .HasForeignKey("SeasonCraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonCraft");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.GrandPrix", b =>
                {
                    b.HasOne("Motorsport.WebApi.Models.Circuit", "Circuit")
                        .WithMany()
                        .HasForeignKey("CircuitId");

                    b.HasOne("Motorsport.WebApi.Models.Season", null)
                        .WithMany("Races")
                        .HasForeignKey("SeasonId");

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Season", b =>
                {
                    b.HasOne("Motorsport.WebApi.Models.Category", null)
                        .WithMany("Seasons")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.SeasonCraft", b =>
                {
                    b.HasOne("Motorsport.WebApi.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motorsport.WebApi.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motorsport.WebApi.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Category", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.GrandPrix", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Motorsport.WebApi.Models.Season", b =>
                {
                    b.Navigation("Races");
                });
#pragma warning restore 612, 618
        }
    }
}
